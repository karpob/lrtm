#Fit the data!
#from numpy import *
import matplotlib
matplotlib.use('PDF')
from scipy.optimize import leastsq
from residual_enthalpy_data import residual_enthalpy_data
from residual_pXT_data import residual_pXT_data
from pylab import *
from numpy import *
from generate_pressure import generate_pressure
from enthalpy_h2_h2o_mixture import enthalpy_h2_h2o_mixture
#p=100*ones(16)
MPa_to_kPa=1000.0
Bars_to_kPa=100.0


#p[0]=10.00000000 
#p[1]=1.018702573 
#p[3]=-10.00000000
#p[4]=-1.352643115 

#p[5]=-0.25157134971934 
#p[6]=2.000
#p[7]=1

#p[8]=0.62203841111983   
#p[9]=1.000
#p[10]=3 
 
  
#p[10]=0.88850315184396
#p[11]=1.750
#p[12]=3 
 
  
#p[13]=0.35592212573239 
#p[14]=1.400
#p[15]=4 
#p[0]=0.14218447
#p[1]=0.0801219
#p[2]=0.72924574
#p[3]=0.03325274 
            
                
  
#1st Ni,ti,di
#p[4]=3.07243966
#p[5]=0.02976093
#p[6]=0.89850581
       
#2nd Ni, ti,di
#p[7]=0.52978115
#p[8]=0.02862252
#p[9]=0.89854406
#p=asarray( [ 8.64501879e-01,   1.75580099e+00,   2.87280188e+00,   6.61206279e-01,
#            -1.21541046e-04,   4.89901065e-01,   1.33810202e+01 , -3.68880470e-03,
#             -6.35149371e+00,   2.60562988e+00,   7.89414947e-03,  -2.50704186e+00,
#              7.34116221e+00,   8.61365339e-01,  -3.90884755e+00,   5.24929747e-01] ) 


#p=asarray( [  1.09674908e+00,   1.41206062e+00,   1.55171806e+00,   6.46239299e-01,
#             -2.52540953e-02,   2.95151464e+01,   4.42740553e+01,   
#              1.02536975e-01, 1.55977372e+01,     6.45866805e+00,   
#              7.72484570e-03,   2.58613232e+00,   1.19356679e+01,   
#              2.47541213e+00,   1.69972597e+00,  -4.74376580e-01]) 
#p=asarray([  6.36411008e-01,   5.44935854e-01,   2.18505670e+00,   1.35321090e-02,
#  -2.52540953e-02,   2.95151464e+01,   4.42740553e+01,   3.99649045e+01,
#   7.37181455e+00,   1.49523018e+00,  -5.83924340e+00,  -9.85045804e-03,
#   2.16727467e+01,  -3.19588215e+01,   6.67456626e+00,   1.29947781e+00] )
#p=asarray([  1.38889627e-01,  -4.97936070e-02,   3.44007107e-01,  -5.90253000e-01,
#            -2.52540953e-02,   2.95151464e+01,   4.42740553e+01,   3.99649045e+01,
#             7.37181455e+00,   1.49523018e+00,  -5.83924340e+00,  -9.85045804e-03,
#             2.16727467e+01,  -3.19588215e+01,   6.67456626e+00,   1.29947781e+00])

#p=asarray([  0.278735370,  -6.91501101,   1.35464453,  -3.70505658,
#   6.61469334e-01,   9.79097143e-01,  -4.68079519e-02,  -4.19840850e-01])
#asarray(  [1,   1,  1,  1,
             #0,  0,   0,  0])

p=asarray([ -1.01626026e+02,   1.37137825e+06,  -6.07526284e+02,   3.03258641e+04,
   1.71969062e+00,   3.58384718e+02,  -1.53450687e+02]) 
 
#[  4.62743073e-01   9.73148285e-01   2.01174734e+00   8.32933973e-01
#   1.13554111e+00   1.66033231e+02  -7.53997710e-01  -3.67776301e-01
#  -2.50867607e+00   8.20806368e-01  -4.25881541e+00  -1.33188143e-03
#   5.72534620e+00   7.93281165e-03   5.17685736e+00   6.59835575e+00]

#last good

#p=asarray([1.19749205e-01,  -9.20284033e-02,   4.19979364e-01 ,  8.32355830e-02,
#             -5.30930589e-01,   1.62758767e+01,  -5.05583799e+00,   6.64561523e-03,
#             -4.87216068e+00,  -2.84984565e+00 , -5.14235272e-08,   6.01461330e-01,
#              1.40437201e+01,   5.26946706e-01,   1.79613673e+01,  -5.26733032e+00]
#)
#p=asarray([  0.14218447, 0.0801219, 0.72924574,0.03325274,
#                    0.0, 1.0,1.0,1.0] )            
             
#p=asarray([  7.62044956e-01,   2.99771676e+00,   3.25785290e+00,   3.71871214e-01,
#            1,   1.61828232e+00,   1.33389597e+01,  -1.39514126e-01,
#            -7.68873477e+00,   1.42905679e+00,   6.95248037e-04,  -3.97777040e+00,
#             8.50225734e+00,   7.26551413e-01,  -6.14888877e+00,   1.97949290e+00]   )

#p=asarray([  0.9,   0.5,  5,  0.4])


      
#good
#p=asarray([ 2.20989751,  1.08005116, -4.43561572, -1.17505603,  0.66244269,  2.96925322,
#           2.74541528] ) 


#p=asarray([1.55241283,0.42769401,4.27992598,0.96670593,2.85272332,
#           74.01292232,0.62529449,-15.72930264,-123.66329659,7.75795908,
#           9.44061057,78.4079688,0.74614104,2.18500063,2.26700454,
#           -0.19121408,12.50114055,0.80259888,0.19468873,0.53984808])

#p=asarray([0.92254385,   0.45783246,   5.1791537,    0.4516013,0.4516013,   -2.59307039,-1.27517692])

#p=asarray([  0.92254385,   0.45783246,   5.1791537,    0.4516013,   -2.59307039,
#            -1.27517692,   0.62529449,   3.6806721,  -14.25620312,   4.50090634,
#             0.64246779,  78.4079688,    4.0779642,   -0.43066962,   0.5449172,   -0.642436,
#             19.11255919,   0.63147353,   0.45241718,   1.07577125])
#p=asarray([   2.19918846e+00 ,  7.24375820e-01 , -4.41601018e+00,   3.54342237e-01,
#              -1.27353445e+00,   3.40800293e+00,   8.58085314e+00,   2.58198506e-04,
#               1.75923895e+01,   3.74164311e+01,  -1.18434900e-02,  -1.15025222e+00,
#                6.91968217e-06,  -3.92895063e-07,  -3.55181388e-01,   1.06268543e+01])

#Data from Seward and Franck pXT data
h2_M_amu=2.01594
h2o_M_amu=float(8.314472/0.46151805)
Data_pXT_T=asarray([374.3,374.5,374.5,374.5,374.5,374.5,374.5,375.3,376.5,379.0,381.3,374.3,374.5,374.5,374.5,374.5,374.5,374.5, 375.3, 376.5,379.0, 381.3,0,0,0])+273.15 #Celcius-->Kelvin
Data_pXT_P=asarray([229,237, 270,320,372,428, 690, 1010, 1410,2020,2520,229,237, 270,320,372,428, 690, 1010, 1410,2020,2520,0,0,0])*Bars_to_kPa # Bars->kPa
Data_pXT_x_h2=asarray([0.005,0.01,0.03,0.06,0.09,0.12,0.20,0.25,0.30,0.35,0.38,0.005,0.01,0.03,0.06,0.09,0.12,0.20,0.25,0.30,0.35,0.38,0,0,0])
Data_pXT_x_h2o=1.0-Data_pXT_x_h2 
Data_pXT_Mmix=((Data_pXT_x_h2o*h2o_M_amu)+(Data_pXT_x_h2*h2_M_amu))
Data_pXT_Vol=asarray([56.88,56.67,55.80,54.51,53.34,52.14,43.50,37.41,33.60,30.91,29.66,56.88,56.67,55.80,54.51,53.34,52.14,43.50,37.41,33.60,30.91,29.66,0,0,0])*(1.0/Data_pXT_Mmix)*(1.0/1.0e6)*1000.0 # cm**3/mol ->m**3/kg
                      #(cm**3/mol)(1 m**3/1e6 cm**3)(1 mol/Mmix(g))(1000 g/ 1 kg)
Data_pXT_density=1.0/Data_pXT_Vol #kg/m**3
#22,23,24

Data_pXT_T[22]=376.204932    
Data_pXT_T[23]=377.726416    
Data_pXT_T[24]=446.697607      
     


Data_pXT_P[22]=19.826*Bars_to_kPa
Data_pXT_P[23]=75.059974199647826*Bars_to_kPa
Data_pXT_P[24]=87.860145913789353*Bars_to_kPa


Data_pXT_x_h2[22]=18.663980319129138/(18.663980319129138+1.126616830674388)#g/L equivalent to kg/m^3
Data_pXT_x_h2[23]=74.965164072252165/(74.965164072252165+1.126616830674388)#g/L equivalent to kg/m^3
Data_pXT_x_h2[24]=74.965164072252165/(74.965164072252165+1.126616830674388)#g/L equivalent to kg/m^3


Data_pXT_x_h2o[22]=1.0-Data_pXT_x_h2[22]
Data_pXT_x_h2o[23]=1.0-Data_pXT_x_h2[23]
Data_pXT_x_h2o[24]=1.0-Data_pXT_x_h2[24]


Data_pXT_density[22]=(18.663980319129138*h2_M_amu+1.126616830674388*h2o_M_amu)/32.328408091385590#g/L equivalent to kg/m^3
Data_pXT_density[23]=(74.965164072252165*h2_M_amu+1.126616830674388*h2o_M_amu)/32.337938041626330#g/L equivalent to kg/m^3
Data_pXT_density[24]=(74.965164072252165*h2_M_amu+1.126616830674388*h2o_M_amu)/32.413598694129391#g/L equivalent to kg/m^3


print Data_pXT_density
print Data_pXT_x_h2o
print Data_pXT_x_h2

#[optimized_params,message]=leastsq(residual_enthalpy_data,p[:],args=(Data_Enthalpy_h_with_correct_units,Data_Enthalpy_P,Data_Enthalpy_T,Data_Enthalpy_x_h2,Data_Enthalpy_x_h2o))
#print optimized_params,message
#from_equation=enthalpy_h2_h2o_mixture(Data_Enthalpy_T,Data_Enthalpy_P,Data_Enthalpy_x_h2,Data_Enthalpy_x_h2o,F_ij,beta_ij,phi_ij,sigma_ij,xi_ij)
#[optimized_params,message]=leastsq(residual_pXT_data,p[:],maxfev=100000000,args=(Data_pXT_P,Data_pXT_T,Data_pXT_density,Data_pXT_x_h2,Data_pXT_x_h2o))
#print optimized_params
optimized_params=p
residual=residual_pXT_data(optimized_params,Data_pXT_P,Data_pXT_T,Data_pXT_density,Data_pXT_x_h2,Data_pXT_x_h2o)
print 100*(residual/Data_pXT_P)
figure(1)
plot(Data_pXT_T,residual,'kx')
savefig('terr.pdf')
figure(2)
plot(Data_pXT_density,residual,'kx')
savefig('rhoerr.pdf')

figure(3)
plot(Data_pXT_T,Data_pXT_P,'kx')
savefig('TP.pdf')
figure(4)
plot(Data_pXT_density,Data_pXT_P,'kx')
savefig('rhoP.pdf')
print Data_pXT_P
